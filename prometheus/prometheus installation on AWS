https://www.youtube.com/watch?v=7gW5pSM6dlU
============================================== INSTALL PROMETHEUS ===========================================================

https://codewizardly.com/prometheus-on-aws-ec2-part1/

sudo useradd --no-create-home prometheus
sudo mkdir /etc/prometheus
sudo mkdir /var/lib/prometheus


wget https://github.com/prometheus/prometheus/releases/download/v2.19.0/prometheus-2.19.0.linux-amd64.tar.gz
tar xvfz prometheus-2.19.0.linux-amd64.tar.gz

sudo cp prometheus-2.19.0.linux-amd64/prometheus /usr/local/bin
sudo cp prometheus-2.19.0.linux-amd64/promtool /usr/local/bin/
sudo cp -r prometheus-2.19.0.linux-amd64/consoles /etc/prometheus
sudo cp -r prometheus-2.19.0.linux-amd64/console_libraries /etc/prometheus
sudo cp -r prometheus-2.19.0.linux-amd64/prometheus.yml /etc/prometheus

sudo cp prometheus-2.19.0.linux-amd64/promtool /usr/local/bin/
rm -rf prometheus-2.19.0.linux-amd64.tar.gz prometheus-2.19.0.linux-amd64

--->Initially and as a proof of concept we can configure Prometheus to monitor itself. All what we need to do is create or replace the content of 
/etc/prometheus/prometheus.yml.

global:
  scrape_interval: 15s
  external_labels:
    monitor: 'prometheus'

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['<ip address of vm:9090']
      
      
-->We might want Prometheus to be available as a service. Every time we reboot the system Prometheus will start with the OS. 
Create /etc/systemd/system/prometheus.service and add to it the following content:

[Unit]
Description=Prometheus
Wants=network-online.target
After=network-online.target

[Service]
User=prometheus
Group=prometheus
Type=simple
ExecStart=/usr/local/bin/prometheus \
    --config.file /etc/prometheus/prometheus.yml \
    --storage.tsdb.path /var/lib/prometheus/ \
    --web.console.templates=/etc/prometheus/consoles \
    --web.console.libraries=/etc/prometheus/console_libraries

[Install]
WantedBy=multi-user.target

-->Let’s change the permissions of the directories, files and binaries we just added to our system.

sudo chown prometheus:prometheus /etc/prometheus
sudo chown prometheus:prometheus /usr/local/bin/prometheus
sudo chown prometheus:prometheus /usr/local/bin/promtool
sudo chown -R prometheus:prometheus /etc/prometheus/consoles
sudo chown -R prometheus:prometheus /etc/prometheus/console_libraries
sudo chown -R prometheus:prometheus /var/lib/prometheus

Now we need to configure systemd.
sudo systemctl daemon-reload
sudo systemctl enable prometheus
sudo systemctl status prometheus


<ip>:9090


============================================================ INSTALL NODE EXPORTER  ============================================================

https://codewizardly.com/prometheus-on-aws-ec2-part2/

sudo useradd --no-create-home node_exporter

-->We are ready to install Node Exporter binaries.

wget https://github.com/prometheus/node_exporter/releases/download/v1.0.1/node_exporter-1.0.1.linux-amd64.tar.gz
tar xzf node_exporter-1.0.1.linux-amd64.tar.gz
sudo cp node_exporter-1.0.1.linux-amd64/node_exporter /usr/local/bin/node_exporter

cd /usr/local/bin
node_exporter prometheus promtool

rm -rf node_exporter-1.0.1.linux-amd64.tar.gz node_exporter-1.0.1.linux-amd64

-->Configure a service. Create /etc/systemd/system/node-exporter.service if it doesn’t exist.
[Unit]
Description=Prometheus Node Exporter Service
After=network.target

[Service]
User=node_exporter
Group=node_exporter
Type=simple
ExecStart=/usr/local/bin/node_exporter

[Install]
WantedBy=multi-user.target

-->Configure systemd.
sudo systemctl daemon-reload
sudo systemctl enable node-exporter
sudo systemctl start node-exporter
sudo systemctl status node-exporter


--> add node-exporter to prometheus

Edit /etc/prometheus/prometheus.yml file.

global:
  scrape_interval: 15s
  external_labels:
    monitor: 'prometheus'

scrape_configs:
  - job_name: 'node_exporter'
    static_configs:
      - targets: ['<ip of prometheus>:9100']


sudo systemctl restart prometheus

http://18.212.184.119:9100/metrics            #node-exporter
http://18.212.184.119:9090/classic/targets    #prometheus
http://18.212.184.119:9090/classic/config

--------------> excute queries in prometheus <----------------------
node_uname_info

------------->Prometheus advanced queries  <----------------------

prometheus_http_requests_total{code="302"}
{handler =~"/api.*"}
node memory free percentaga
100-(100* node_memory_MemFree_bytes/node_memory_MemAvailable_bytes)

--------------------------  ALERTING RULES  -----------------------------
Each and every time we donot frame the command to check the data --- for this use records

https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/

create prometheus_rules.yml 

root@ip-172-31-85-32:/etc/prometheus# pwd
/etc/prometheus
root@ip-172-31-85-32:/etc/prometheus# ls
console_libraries  consoles  prometheus.yml  prometheus_rules.yml

vi prometheus_rules.yml

groups:
   - name: example
     rules:
      - record: node_memory_free_percentage
        expr: 100-(100* node_memory_MemFree_bytes/node_memory_MemAvailable_bytes)


-> once done you need to add prometheus_rules.yml inside of prometheus.yml file and restart prometheus 
and check in query your rule will present or not

systemctl daemon-reload
systemctl restart prometheus 
systemctl status prometheus 

node_memory_free_percentage

O/P of prometheus.yml

# my global config
global:
  scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
  evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
  # scrape_timeout is set to the global default (10s).

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          # - alertmanager:9093

# Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
rule_files:
  # - "first_rules.yml"
  # - "second_rules.yml"
    - prometheus_rules.yml
    
 -----------------------------------------
 these will present in rules path of prometheus
 
 http://18.212.184.119:9090/classic/rules
 
record: node_memory_free_percentage
expr: 100
  - (100 * node_memory_MemFree_bytes / node_memory_MemAvailable_bytes)
  

--------------------------------------------- ALERTING  -----------------------------------------
https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/

groups:
 - name: ALERTINT RULES
   rules:
      - record: node_memory_free_percentage
        expr: 100-(100* node_memory_MemFree_bytes/node_memory_MemAvailable_bytes)
    
        #ALERTS    
      - alert: HighRequestLatency
        expr: node_memory_MemAvailable_bytes >5
        for: 10m
        labels:
          severity: page
        annotations:
          summary: High request latency
      
      - alert: HighRequestLatency
        expr: node_memory_MemAvailable_bytes >10
        for: 10m
        labels:
          severity: page
        annotations:
          summary: High request latency10
          
  -------------------------
o/p IN PROMETHEUS LIKE
  
http://18.212.184.119:9090/classic/rules

ls
LICENSE  NOTICE  console_libraries  consoles  data  prometheus  prometheus.yml  promtool

------------------- Check the rules file valid or not ----------------------------

./promtool check rules prometheus_rules.yml
Checking prometheus_rules.yml
  SUCCESS: 2 rules found




==============================================INSTALL ALERT MANAGER====================================================
https://codewizardly.com/prometheus-on-aws-ec2-part4/

https://github.com/prometheus/alertmanager/releases/download/v0.23.0/alertmanager-0.23.0.linux-amd64.tar.gz
https://prometheus.io/download/

wget https://github.com/prometheus/alertmanager/releases/download/v0.23.0/alertmanager-0.23.0.linux-amd64.tar.gz
tar -xzvf alertmanager-0.23.0.linux-amd64.tar.gz

ls
LICENSE  NOTICE  alertmanager  alertmanager.yml  amtool

==============================================INSTALL SERVICE DISCOVERY====================================================

https://codewizardly.com/prometheus-on-aws-ec2-part3/


============================================== INSTALL GRAFANA=============================================================

https://www.radishlogic.com/aws/ec2/how-to-install-grafana-on-ec2-amazon-linux-2/


































